// Code generated by MockGen. DO NOT EDIT.
// Source: crypto_manager.go

// Package mock_util is a generated GoMock package.
package mock_util

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCryptoManager is a mock of CryptoManager interface.
type MockCryptoManager struct {
	ctrl     *gomock.Controller
	recorder *MockCryptoManagerMockRecorder
}

// MockCryptoManagerMockRecorder is the mock recorder for MockCryptoManager.
type MockCryptoManagerMockRecorder struct {
	mock *MockCryptoManager
}

// NewMockCryptoManager creates a new mock instance.
func NewMockCryptoManager(ctrl *gomock.Controller) *MockCryptoManager {
	mock := &MockCryptoManager{ctrl: ctrl}
	mock.recorder = &MockCryptoManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCryptoManager) EXPECT() *MockCryptoManagerMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockCryptoManager) Encrypt(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCryptoManagerMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCryptoManager)(nil).Encrypt), arg0)
}
